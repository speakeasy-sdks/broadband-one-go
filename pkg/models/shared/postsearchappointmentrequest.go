// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PostSearchAppointmentRequestRelatedEntityAppointmentType - Type of appointment. This field is not applicable for broadband-one request.</br>Below are possible values: </br><ul><li>'Standard' - Regular.</li><li>'Expedited' - For priority appointments.</li><li>'Supplier Failed' - For rebooking appointment in case of missed appointments.</li></ul>
type PostSearchAppointmentRequestRelatedEntityAppointmentType string

const (
	PostSearchAppointmentRequestRelatedEntityAppointmentTypeStandard       PostSearchAppointmentRequestRelatedEntityAppointmentType = "Standard"
	PostSearchAppointmentRequestRelatedEntityAppointmentTypeExpedited      PostSearchAppointmentRequestRelatedEntityAppointmentType = "Expedited"
	PostSearchAppointmentRequestRelatedEntityAppointmentTypeSupplierFailed PostSearchAppointmentRequestRelatedEntityAppointmentType = "Supplier Failed"
)

func (e PostSearchAppointmentRequestRelatedEntityAppointmentType) ToPointer() *PostSearchAppointmentRequestRelatedEntityAppointmentType {
	return &e
}

func (e *PostSearchAppointmentRequestRelatedEntityAppointmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "Expedited":
		fallthrough
	case "Supplier Failed":
		*e = PostSearchAppointmentRequestRelatedEntityAppointmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentRequestRelatedEntityAppointmentType: %v", v)
	}
}

// PostSearchAppointmentRequestRelatedEntityProductCharacteristicName - Product characteristic <i>name</i>. </b>Note: This field is passed when <i>characteristic</i> list is passed in request.
type PostSearchAppointmentRequestRelatedEntityProductCharacteristicName string

const (
	PostSearchAppointmentRequestRelatedEntityProductCharacteristicNameDirectoryNumber  PostSearchAppointmentRequestRelatedEntityProductCharacteristicName = "DirectoryNumber"
	PostSearchAppointmentRequestRelatedEntityProductCharacteristicNameAccessTechnology PostSearchAppointmentRequestRelatedEntityProductCharacteristicName = "AccessTechnology"
	PostSearchAppointmentRequestRelatedEntityProductCharacteristicNameAccessLineID     PostSearchAppointmentRequestRelatedEntityProductCharacteristicName = "AccessLineId"
)

func (e PostSearchAppointmentRequestRelatedEntityProductCharacteristicName) ToPointer() *PostSearchAppointmentRequestRelatedEntityProductCharacteristicName {
	return &e
}

func (e *PostSearchAppointmentRequestRelatedEntityProductCharacteristicName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryNumber":
		fallthrough
	case "AccessTechnology":
		fallthrough
	case "AccessLineId":
		*e = PostSearchAppointmentRequestRelatedEntityProductCharacteristicName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentRequestRelatedEntityProductCharacteristicName: %v", v)
	}
}

type PostSearchAppointmentRequestRelatedEntityProductCharacteristic struct {
	// Product characteristic <i>name</i>. </b>Note: This field is passed when <i>characteristic</i> list is passed in request.
	//
	Name *PostSearchAppointmentRequestRelatedEntityProductCharacteristicName `json:"name,omitempty"`
	// Product characteristic <i>value</i>.</br> Note: This field is passed when <i>characteristic</i> list is passed in request.</br>
	// Below are possible values when 'AccessTechnology' is passed in <i>characteristic.name</i>,
	//  <ul><li>'Generic Ethernet Access'</li><li>'Generic Ethernet Access â€“ FTTP'</li><li>
	//  'SOGEA Existing Line'</li><li>'SOGEA New Line'</li><li>'SOGEA GFAST New Line'</li><li>'SOGEA GFAST Existing Line'</li><li>'FTTC'</li><li>'FTTC GFAST'</li><li>'FTTC Sim2'</li><li>'FTTC GFAST Sim2'</li><li>'FTTP'</li></ul>
	//
	Value *string `json:"value,omitempty"`
}

func (o *PostSearchAppointmentRequestRelatedEntityProductCharacteristic) GetName() *PostSearchAppointmentRequestRelatedEntityProductCharacteristicName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostSearchAppointmentRequestRelatedEntityProductCharacteristic) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type PostSearchAppointmentRequestRelatedEntityProductPlace struct {
	// Indicates respective place.</br>Note: This field is passed when <i>place</i> list is passed in request.
	//
	AtReferredType *string `json:"@referredType,omitempty"`
	// Unique identifier of the customer place.</br>Note: This field is passed when <i>place</i> list is passed in request. ID value represents address key that we received from the 'Common Geographic Address Management API -GET /geographicAddress API'.
	//
	ID *string `json:"id,omitempty"`
	// Role of the customer place.</br>Note: This field is passed when <i>place</i> list is passed in request.
	//
	Role *string `json:"role,omitempty"`
}

func (o *PostSearchAppointmentRequestRelatedEntityProductPlace) GetAtReferredType() *string {
	if o == nil {
		return nil
	}
	return o.AtReferredType
}

func (o *PostSearchAppointmentRequestRelatedEntityProductPlace) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PostSearchAppointmentRequestRelatedEntityProductPlace) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// PostSearchAppointmentRequestRelatedEntityProductProductSpecification - Place holder for capturing product details.
type PostSearchAppointmentRequestRelatedEntityProductProductSpecification struct {
	// Product name for which appointment is being requested.</br>Etherway Superfast GEA for ethernet request and BB1 for broadband hubco user.
	ID string `json:"id"`
}

func (o *PostSearchAppointmentRequestRelatedEntityProductProductSpecification) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// PostSearchAppointmentRequestRelatedEntityProduct - Indicates the <i>product</i> details.
type PostSearchAppointmentRequestRelatedEntityProduct struct {
	// List of product characteristics. Characteristics of the product to instantiate or to modify.
	//
	Characteristic []PostSearchAppointmentRequestRelatedEntityProductCharacteristic `json:"characteristic,omitempty"`
	// List of places.</br>Note: This list is passed when search is made based on address key.
	//
	Place []PostSearchAppointmentRequestRelatedEntityProductPlace `json:"place,omitempty"`
	// Place holder for capturing product details.
	ProductSpecification PostSearchAppointmentRequestRelatedEntityProductProductSpecification `json:"productSpecification"`
}

func (o *PostSearchAppointmentRequestRelatedEntityProduct) GetCharacteristic() []PostSearchAppointmentRequestRelatedEntityProductCharacteristic {
	if o == nil {
		return nil
	}
	return o.Characteristic
}

func (o *PostSearchAppointmentRequestRelatedEntityProduct) GetPlace() []PostSearchAppointmentRequestRelatedEntityProductPlace {
	if o == nil {
		return nil
	}
	return o.Place
}

func (o *PostSearchAppointmentRequestRelatedEntityProduct) GetProductSpecification() PostSearchAppointmentRequestRelatedEntityProductProductSpecification {
	if o == nil {
		return PostSearchAppointmentRequestRelatedEntityProductProductSpecification{}
	}
	return o.ProductSpecification
}

// PostSearchAppointmentRequestRelatedEntitySiteVisitReason - Indicates site visit reason for appointment.<br/>
// Note: Below are the default values,
// <ul><li>FTTC - 'Standard'.</li>
// <li>FTTP- 'Standard'. </li>
// <li>SOGFast - 'Premium'.</li>
// <li>SOGEA- 'Standard'.</li></ul>
type PostSearchAppointmentRequestRelatedEntitySiteVisitReason string

const (
	PostSearchAppointmentRequestRelatedEntitySiteVisitReasonStandard PostSearchAppointmentRequestRelatedEntitySiteVisitReason = "Standard"
	PostSearchAppointmentRequestRelatedEntitySiteVisitReasonPremium  PostSearchAppointmentRequestRelatedEntitySiteVisitReason = "Premium"
)

func (e PostSearchAppointmentRequestRelatedEntitySiteVisitReason) ToPointer() *PostSearchAppointmentRequestRelatedEntitySiteVisitReason {
	return &e
}

func (e *PostSearchAppointmentRequestRelatedEntitySiteVisitReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "Premium":
		*e = PostSearchAppointmentRequestRelatedEntitySiteVisitReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentRequestRelatedEntitySiteVisitReason: %v", v)
	}
}

type PostSearchAppointmentRequestRelatedEntity struct {
	// Base type of the respective entity.
	AtBaseType string `json:"@baseType"`
	// Referred type of the respective entity.
	AtReferredType string `json:"@referredType"`
	// Type of the respective entity.
	AtType string `json:"@type"`
	// Type of appointment. This field is not applicable for broadband-one request.</br>Below are possible values: </br><ul><li>'Standard' - Regular.</li><li>'Expedited' - For priority appointments.</li><li>'Supplier Failed' - For rebooking appointment in case of missed appointments.</li></ul>
	//
	AppointmentType *PostSearchAppointmentRequestRelatedEntityAppointmentType `json:"appointmentType,omitempty"`
	// Identifier of the respective entity.
	ID string `json:"id"`
	// It is mandatory for 'SOGEA' request. <br/>Note: When request is for new exchange line value should be 'true' or else 'false'.
	//
	NewExchangeLine *bool `json:"newExchangeLine,omitempty"`
	// Indicates the <i>product</i> details.
	Product PostSearchAppointmentRequestRelatedEntityProduct `json:"product"`
	// Role of the respective entity.
	Role string `json:"role"`
	// The value can be 'true' or 'false', by default this value will be false if not received in input parameter list. Below are the possible value:<br/>
	// 'false' - Standalone BB Journey.<br/>
	// 'true' - SIM2 journey.<br/>
	// Note: <i>simProvide</i> field is not applicable for 'Sogea request and Ethernet' request.
	//
	SimProvide *bool `json:"simProvide,omitempty"`
	// Indicates site visit reason for appointment.<br/>
	// Note: Below are the default values,
	// <ul><li>FTTC - 'Standard'.</li>
	// <li>FTTP- 'Standard'. </li>
	// <li>SOGFast - 'Premium'.</li>
	// <li>SOGEA- 'Standard'.</li></ul>
	//
	SiteVisitReason *PostSearchAppointmentRequestRelatedEntitySiteVisitReason `json:"siteVisitReason,omitempty"`
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetAtBaseType() string {
	if o == nil {
		return ""
	}
	return o.AtBaseType
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetAtReferredType() string {
	if o == nil {
		return ""
	}
	return o.AtReferredType
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetAtType() string {
	if o == nil {
		return ""
	}
	return o.AtType
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetAppointmentType() *PostSearchAppointmentRequestRelatedEntityAppointmentType {
	if o == nil {
		return nil
	}
	return o.AppointmentType
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetNewExchangeLine() *bool {
	if o == nil {
		return nil
	}
	return o.NewExchangeLine
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetProduct() PostSearchAppointmentRequestRelatedEntityProduct {
	if o == nil {
		return PostSearchAppointmentRequestRelatedEntityProduct{}
	}
	return o.Product
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetSimProvide() *bool {
	if o == nil {
		return nil
	}
	return o.SimProvide
}

func (o *PostSearchAppointmentRequestRelatedEntity) GetSiteVisitReason() *PostSearchAppointmentRequestRelatedEntitySiteVisitReason {
	if o == nil {
		return nil
	}
	return o.SiteVisitReason
}

// PostSearchAppointmentRequestRequestedTimeSlotValidFor - Valid timeslot for the given request.
type PostSearchAppointmentRequestRequestedTimeSlotValidFor struct {
	// Start time for the given request. Format is TMF date.
	StartDateTime string `json:"startDateTime"`
}

func (o *PostSearchAppointmentRequestRequestedTimeSlotValidFor) GetStartDateTime() string {
	if o == nil {
		return ""
	}
	return o.StartDateTime
}

type PostSearchAppointmentRequestRequestedTimeSlot struct {
	// Valid timeslot for the given request.
	ValidFor PostSearchAppointmentRequestRequestedTimeSlotValidFor `json:"validFor"`
}

func (o *PostSearchAppointmentRequestRequestedTimeSlot) GetValidFor() PostSearchAppointmentRequestRequestedTimeSlotValidFor {
	if o == nil {
		return PostSearchAppointmentRequestRequestedTimeSlotValidFor{}
	}
	return o.ValidFor
}

type PostSearchAppointmentRequest struct {
	// List of related entities.
	RelatedEntity []PostSearchAppointmentRequestRelatedEntity `json:"relatedEntity"`
	// Only one timeslot in the list is accepted.
	RequestedTimeSlot []PostSearchAppointmentRequestRequestedTimeSlot `json:"requestedTimeSlot"`
}

func (o *PostSearchAppointmentRequest) GetRelatedEntity() []PostSearchAppointmentRequestRelatedEntity {
	if o == nil {
		return []PostSearchAppointmentRequestRelatedEntity{}
	}
	return o.RelatedEntity
}

func (o *PostSearchAppointmentRequest) GetRequestedTimeSlot() []PostSearchAppointmentRequestRequestedTimeSlot {
	if o == nil {
		return []PostSearchAppointmentRequestRequestedTimeSlot{}
	}
	return o.RequestedTimeSlot
}
