// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PostSearchAppointmentResponseAvailableTimeSlotValidFor - Valid time slot for the given request. Difference between start date time and end date time provides the slot duration.
type PostSearchAppointmentResponseAvailableTimeSlotValidFor struct {
	// End time for the given request.
	EndDateTime string `json:"endDateTime"`
	// Start time for the given request.
	StartDateTime string `json:"startDateTime"`
}

func (o *PostSearchAppointmentResponseAvailableTimeSlotValidFor) GetEndDateTime() string {
	if o == nil {
		return ""
	}
	return o.EndDateTime
}

func (o *PostSearchAppointmentResponseAvailableTimeSlotValidFor) GetStartDateTime() string {
	if o == nil {
		return ""
	}
	return o.StartDateTime
}

type PostSearchAppointmentResponseAvailableTimeSlot struct {
	// Indicates the slot for the given request.
	Slot string `json:"slot"`
	// Valid time slot for the given request. Difference between start date time and end date time provides the slot duration.
	ValidFor PostSearchAppointmentResponseAvailableTimeSlotValidFor `json:"validFor"`
}

func (o *PostSearchAppointmentResponseAvailableTimeSlot) GetSlot() string {
	if o == nil {
		return ""
	}
	return o.Slot
}

func (o *PostSearchAppointmentResponseAvailableTimeSlot) GetValidFor() PostSearchAppointmentResponseAvailableTimeSlotValidFor {
	if o == nil {
		return PostSearchAppointmentResponseAvailableTimeSlotValidFor{}
	}
	return o.ValidFor
}

// PostSearchAppointmentResponseRelatedEntityAppointmentType - Type of an appointment. </br>Below are possible values:</br><ul><li>'Standard' - Regular.</li><li>'Expedited' - For priority appointments.</li><li>'Supplier Failed' - For rebooking appointment in case of missed appointments.</li></ul>
type PostSearchAppointmentResponseRelatedEntityAppointmentType string

const (
	PostSearchAppointmentResponseRelatedEntityAppointmentTypeStandard       PostSearchAppointmentResponseRelatedEntityAppointmentType = "Standard"
	PostSearchAppointmentResponseRelatedEntityAppointmentTypeExpedited      PostSearchAppointmentResponseRelatedEntityAppointmentType = "Expedited"
	PostSearchAppointmentResponseRelatedEntityAppointmentTypeSupplierFailed PostSearchAppointmentResponseRelatedEntityAppointmentType = "Supplier Failed"
)

func (e PostSearchAppointmentResponseRelatedEntityAppointmentType) ToPointer() *PostSearchAppointmentResponseRelatedEntityAppointmentType {
	return &e
}

func (e *PostSearchAppointmentResponseRelatedEntityAppointmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "Expedited":
		fallthrough
	case "Supplier Failed":
		*e = PostSearchAppointmentResponseRelatedEntityAppointmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentResponseRelatedEntityAppointmentType: %v", v)
	}
}

// PostSearchAppointmentResponseRelatedEntityProductCharacteristicName - Product characteristic <i>name</i>. </b>Note: This field is passed when <i>characteristic</i> list is passed in request.
type PostSearchAppointmentResponseRelatedEntityProductCharacteristicName string

const (
	PostSearchAppointmentResponseRelatedEntityProductCharacteristicNameDirectoryNumber  PostSearchAppointmentResponseRelatedEntityProductCharacteristicName = "DirectoryNumber"
	PostSearchAppointmentResponseRelatedEntityProductCharacteristicNameAccessTechnology PostSearchAppointmentResponseRelatedEntityProductCharacteristicName = "AccessTechnology"
	PostSearchAppointmentResponseRelatedEntityProductCharacteristicNameAccessLineID     PostSearchAppointmentResponseRelatedEntityProductCharacteristicName = "AccessLineId"
)

func (e PostSearchAppointmentResponseRelatedEntityProductCharacteristicName) ToPointer() *PostSearchAppointmentResponseRelatedEntityProductCharacteristicName {
	return &e
}

func (e *PostSearchAppointmentResponseRelatedEntityProductCharacteristicName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryNumber":
		fallthrough
	case "AccessTechnology":
		fallthrough
	case "AccessLineId":
		*e = PostSearchAppointmentResponseRelatedEntityProductCharacteristicName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentResponseRelatedEntityProductCharacteristicName: %v", v)
	}
}

type PostSearchAppointmentResponseRelatedEntityProductCharacteristic struct {
	// Product characteristic <i>name</i>. </b>Note: This field is passed when <i>characteristic</i> list is passed in request.
	//
	Name *PostSearchAppointmentResponseRelatedEntityProductCharacteristicName `json:"name,omitempty"`
	// Product characteristic <i>value</i>.</br> Note: This field is passed when <i>characteristic</i> list is passed in request.</br>
	//  Below are possible values when 'AccessTechnology' is passed in <i>characteristic.name</i>,
	//  <ul><li>'Generic Ethernet Access'</li><li>'Generic Ethernet Access - FTTP'</li><li>
	//  'SOGEA Existing Line'</li><li>'SOGEA New Line'</li><li>'SOGEA GFAST New Line'</li><li>'SOGEA GFAST Existing Line'</li><li>'FTTC'</li><li>'FTTC GFAST'</li><li>'FTTC Sim2'</li><li>'FTTC GFAST Sim2'</li><li>'FTTP'</li></ul>
	//
	Value *string `json:"value,omitempty"`
}

func (o *PostSearchAppointmentResponseRelatedEntityProductCharacteristic) GetName() *PostSearchAppointmentResponseRelatedEntityProductCharacteristicName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostSearchAppointmentResponseRelatedEntityProductCharacteristic) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type PostSearchAppointmentResponseRelatedEntityProductPlace struct {
	// Indicates the referred type of the respective place.</br>Note: This field is passed when <i>place</i> list is passed in request.
	//
	AtReferredType *string `json:"@referredType,omitempty"`
	// Unique identifier of the respective place.</br>Note: This field is passed when <i>place</i> list is passed in request. ID value represents address key that we received from the 'Common Geographic Address Management API -GET /geographicAddress API'.
	//
	ID *string `json:"id,omitempty"`
	// Role of the respective place.</br>Note: This field is passed when <i>place</i> list is passed in request.
	//
	Role *string `json:"role,omitempty"`
}

func (o *PostSearchAppointmentResponseRelatedEntityProductPlace) GetAtReferredType() *string {
	if o == nil {
		return nil
	}
	return o.AtReferredType
}

func (o *PostSearchAppointmentResponseRelatedEntityProductPlace) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PostSearchAppointmentResponseRelatedEntityProductPlace) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// PostSearchAppointmentResponseRelatedEntityProductProductSpecification - Indicates detailed description of a tangible or intangible object made available externally in the form of a 'productOffering' to customers or other parties playing a party role.
type PostSearchAppointmentResponseRelatedEntityProductProductSpecification struct {
	// Unique identifier of the product specification.</br>Note: It is the 'SCODE' of the product, there is no length validation on the 'SCODE'. The passed 'SCODE' must be valid.
	//
	ID *string `json:"id,omitempty"`
}

func (o *PostSearchAppointmentResponseRelatedEntityProductProductSpecification) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// PostSearchAppointmentResponseRelatedEntityProduct - Indicates <i>product</i> details.
type PostSearchAppointmentResponseRelatedEntityProduct struct {
	// Indicates list of product characteristics. Characteristics of the product to instantiate or to modify.</br>Note: This list is passed when directory number search is made.
	//
	Characteristic []PostSearchAppointmentResponseRelatedEntityProductCharacteristic `json:"characteristic,omitempty"`
	// List of places.</br>Note: This list is passed when search is made based on address key.
	//
	Place []PostSearchAppointmentResponseRelatedEntityProductPlace `json:"place,omitempty"`
	// Indicates detailed description of a tangible or intangible object made available externally in the form of a 'productOffering' to customers or other parties playing a party role.
	ProductSpecification PostSearchAppointmentResponseRelatedEntityProductProductSpecification `json:"productSpecification"`
}

func (o *PostSearchAppointmentResponseRelatedEntityProduct) GetCharacteristic() []PostSearchAppointmentResponseRelatedEntityProductCharacteristic {
	if o == nil {
		return nil
	}
	return o.Characteristic
}

func (o *PostSearchAppointmentResponseRelatedEntityProduct) GetPlace() []PostSearchAppointmentResponseRelatedEntityProductPlace {
	if o == nil {
		return nil
	}
	return o.Place
}

func (o *PostSearchAppointmentResponseRelatedEntityProduct) GetProductSpecification() PostSearchAppointmentResponseRelatedEntityProductProductSpecification {
	if o == nil {
		return PostSearchAppointmentResponseRelatedEntityProductProductSpecification{}
	}
	return o.ProductSpecification
}

// PostSearchAppointmentResponseRelatedEntitySiteVisitReason - Indicates site visit reason. This field required to have values either 'Standard or Premium', refer below note for default values.
// Note: Below are the default values,
// <ul><li>FTTC - 'Standard'.</li>
// <li>FTTP - 'Standard'. </li>
// <li>SOGFast - 'Premium'.</li>
// <li>SOGEA - 'Standard'.</li></ul>
type PostSearchAppointmentResponseRelatedEntitySiteVisitReason string

const (
	PostSearchAppointmentResponseRelatedEntitySiteVisitReasonStandard PostSearchAppointmentResponseRelatedEntitySiteVisitReason = "Standard"
	PostSearchAppointmentResponseRelatedEntitySiteVisitReasonPremium  PostSearchAppointmentResponseRelatedEntitySiteVisitReason = "Premium"
)

func (e PostSearchAppointmentResponseRelatedEntitySiteVisitReason) ToPointer() *PostSearchAppointmentResponseRelatedEntitySiteVisitReason {
	return &e
}

func (e *PostSearchAppointmentResponseRelatedEntitySiteVisitReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "Premium":
		*e = PostSearchAppointmentResponseRelatedEntitySiteVisitReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentResponseRelatedEntitySiteVisitReason: %v", v)
	}
}

type PostSearchAppointmentResponseRelatedEntity struct {
	// Base type of the respective entity.
	AtBaseType string `json:"@baseType"`
	// Referred type of the respective entity.
	AtReferredType string `json:"@referredType"`
	// Type of the appointment resource.
	AtType string `json:"@type"`
	// Type of an appointment. </br>Below are possible values:</br><ul><li>'Standard' - Regular.</li><li>'Expedited' - For priority appointments.</li><li>'Supplier Failed' - For rebooking appointment in case of missed appointments.</li></ul>
	//
	AppointmentType *PostSearchAppointmentResponseRelatedEntityAppointmentType `json:"appointmentType,omitempty"`
	// Identifier of the respective entity.
	ID string `json:"id"`
	// Indicates new exchange for SOGEA.
	NewExchangeLine *bool `json:"newExchangeLine,omitempty"`
	// Indicates <i>product</i> details.
	Product PostSearchAppointmentResponseRelatedEntityProduct `json:"product"`
	// Indicates the role of the respective entity.
	Role string `json:"role"`
	// The value can be 'true or false', by default this value will be 'false' if not received in input parameter list.
	SimProvide *bool `json:"simProvide,omitempty"`
	// Indicates site visit reason. This field required to have values either 'Standard or Premium', refer below note for default values.
	// Note: Below are the default values,
	// <ul><li>FTTC - 'Standard'.</li>
	// <li>FTTP - 'Standard'. </li>
	// <li>SOGFast - 'Premium'.</li>
	// <li>SOGEA - 'Standard'.</li></ul>
	//
	SiteVisitReason *PostSearchAppointmentResponseRelatedEntitySiteVisitReason `json:"siteVisitReason,omitempty"`
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetAtBaseType() string {
	if o == nil {
		return ""
	}
	return o.AtBaseType
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetAtReferredType() string {
	if o == nil {
		return ""
	}
	return o.AtReferredType
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetAtType() string {
	if o == nil {
		return ""
	}
	return o.AtType
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetAppointmentType() *PostSearchAppointmentResponseRelatedEntityAppointmentType {
	if o == nil {
		return nil
	}
	return o.AppointmentType
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetNewExchangeLine() *bool {
	if o == nil {
		return nil
	}
	return o.NewExchangeLine
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetProduct() PostSearchAppointmentResponseRelatedEntityProduct {
	if o == nil {
		return PostSearchAppointmentResponseRelatedEntityProduct{}
	}
	return o.Product
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetSimProvide() *bool {
	if o == nil {
		return nil
	}
	return o.SimProvide
}

func (o *PostSearchAppointmentResponseRelatedEntity) GetSiteVisitReason() *PostSearchAppointmentResponseRelatedEntitySiteVisitReason {
	if o == nil {
		return nil
	}
	return o.SiteVisitReason
}

// PostSearchAppointmentResponseRequestedTimeSlotValidFor - Valid time slot for the given request.
type PostSearchAppointmentResponseRequestedTimeSlotValidFor struct {
	// Start time for the given request. Format is TMF date.
	StartDateTime string `json:"startDateTime"`
}

func (o *PostSearchAppointmentResponseRequestedTimeSlotValidFor) GetStartDateTime() string {
	if o == nil {
		return ""
	}
	return o.StartDateTime
}

type PostSearchAppointmentResponseRequestedTimeSlot struct {
	// Valid time slot for the given request.
	ValidFor PostSearchAppointmentResponseRequestedTimeSlotValidFor `json:"validFor"`
}

func (o *PostSearchAppointmentResponseRequestedTimeSlot) GetValidFor() PostSearchAppointmentResponseRequestedTimeSlotValidFor {
	if o == nil {
		return PostSearchAppointmentResponseRequestedTimeSlotValidFor{}
	}
	return o.ValidFor
}

// PostSearchAppointmentResponseStatus - Status of the requested slot.
type PostSearchAppointmentResponseStatus string

const (
	PostSearchAppointmentResponseStatusRejected            PostSearchAppointmentResponseStatus = "rejected"
	PostSearchAppointmentResponseStatusInProgress          PostSearchAppointmentResponseStatus = "inProgress"
	PostSearchAppointmentResponseStatusDone                PostSearchAppointmentResponseStatus = "done"
	PostSearchAppointmentResponseStatusTerminatedWithError PostSearchAppointmentResponseStatus = "terminatedWithError"
)

func (e PostSearchAppointmentResponseStatus) ToPointer() *PostSearchAppointmentResponseStatus {
	return &e
}

func (e *PostSearchAppointmentResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rejected":
		fallthrough
	case "inProgress":
		fallthrough
	case "done":
		fallthrough
	case "terminatedWithError":
		*e = PostSearchAppointmentResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSearchAppointmentResponseStatus: %v", v)
	}
}

// PostSearchAppointmentResponse - created
type PostSearchAppointmentResponse struct {
	// List of available time slots.
	AvailableTimeSlot []PostSearchAppointmentResponseAvailableTimeSlot `json:"availableTimeSlot"`
	// Unique identifier for customer reference of the respective entity.
	ID string `json:"id"`
	// List of related entities.
	RelatedEntity []PostSearchAppointmentResponseRelatedEntity `json:"relatedEntity"`
	// List of requested time slots.
	RequestedTimeSlot []PostSearchAppointmentResponseRequestedTimeSlot `json:"requestedTimeSlot"`
	// Search date for the given request. Format is TMF date format.
	SearchDate string `json:"searchDate"`
	// Status of the requested slot.
	Status PostSearchAppointmentResponseStatus `json:"status"`
}

func (o *PostSearchAppointmentResponse) GetAvailableTimeSlot() []PostSearchAppointmentResponseAvailableTimeSlot {
	if o == nil {
		return []PostSearchAppointmentResponseAvailableTimeSlot{}
	}
	return o.AvailableTimeSlot
}

func (o *PostSearchAppointmentResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PostSearchAppointmentResponse) GetRelatedEntity() []PostSearchAppointmentResponseRelatedEntity {
	if o == nil {
		return []PostSearchAppointmentResponseRelatedEntity{}
	}
	return o.RelatedEntity
}

func (o *PostSearchAppointmentResponse) GetRequestedTimeSlot() []PostSearchAppointmentResponseRequestedTimeSlot {
	if o == nil {
		return []PostSearchAppointmentResponseRequestedTimeSlot{}
	}
	return o.RequestedTimeSlot
}

func (o *PostSearchAppointmentResponse) GetSearchDate() string {
	if o == nil {
		return ""
	}
	return o.SearchDate
}

func (o *PostSearchAppointmentResponse) GetStatus() PostSearchAppointmentResponseStatus {
	if o == nil {
		return PostSearchAppointmentResponseStatus("")
	}
	return o.Status
}
